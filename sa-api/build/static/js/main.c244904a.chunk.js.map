{"version":3,"sources":["searchbox/search.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","aligned","seq1","seq2","match","mismatch","gap","buttonClick","bind","assertThisInitialized","updateSeq1","updateSeq2","updateMatch","updateMisMatch","updateGap","_this2","axios","get","then","response","data","event","setState","target","value","react_default","a","createElement","Fragment","className","type","onChange","name","selected","onClick","Component","App","val","containerAlignment","containerGrid","alignmentb","rows","alignmenta","hasOwnProperty","split","unshift","matrix","map","row","i","cellPadding","object","rowLen","length","obj","item","colorCell","path","sort","shift","generateGrid","alignment_a","alignment_b","style","clear","searchbox_search","handleResponse","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c244904a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./search.css\";\nimport axios from 'axios';\n\nclass Search extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            aligned:{},\n            seq1: '',\n            seq2: '',\n            match: 1,\n            mismatch: -1,\n            gap: -1\n        };\n\n        this.buttonClick = this.buttonClick.bind(this);\n        this.updateSeq1 = this.updateSeq1.bind(this);\n        this.updateSeq2 = this.updateSeq2.bind(this);\n        this.updateMatch = this.updateMatch.bind(this);\n        this.updateMisMatch = this.updateMisMatch.bind(this);\n        this.updateGap = this.updateGap.bind(this);\n    }\n\n    buttonClick() {\n        axios.get(\"http://localhost:5000/align?seq1=\" + this.state.seq1 + \"&seq2=\" + this.state.seq2\n            + \"&match=\" + this.state.match + \"&mismatch=\" + this.state.mismatch + \"&gap=\" + this.state.gap)\n            .then(response => this.props.data({aligned:response.data}));\n    }\n\n    updateSeq1(event) {\n        this.setState({seq1 : event.target.value});\n    }\n\n    updateSeq2(event) {\n        this.setState({seq2 : event.target.value});\n    }\n\n    updateMatch(event){\n        this.setState({match : event.target.value});\n    }\n\n    updateMisMatch(event){\n        this.setState({mismatch : event.target.value});\n    }\n\n    updateGap(event){\n        this.setState({gap : event.target.value});\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n               <div className=\"search-container\">\n                   <div className=\"offset-lg-4 col-lg-4\">\n                        <input type=\"text\" onChange={this.updateSeq1} name=\"sequence1\" className=\"seq1\"/>\n                   </div>\n                   <div className=\"center compare-icon\">\n                   <span className=\"select-label\">Match</span>\n                   <select onChange={this.updateMatch} className=\"select-box\">\n                       <option>0</option>\n                       <option selected=\"selected\">1</option>\n                       <option>2</option>\n                       <option>3</option>\n                       <option>4</option>\n                       <option>5</option>\n\n                   </select>\n                   <span className=\"select-label\">Mismatch</span>\n                   <select onChange={this.updateMisMatch} className=\"select-box\">\n                       <option selected=\"selected\">-1</option>\n                       <option>-2</option>\n                       <option>-3</option>\n                       <option>-4</option>\n                       <option>-5</option>\n                   </select>\n                   <span className=\"select-label\">Gap</span>\n                   <select onChange={this.updateGap} className=\"select-box\">\n                       <option selected=\"selected\">-1</option>\n                       <option>-2</option>\n                       <option>-3</option>\n                       <option>-4</option>\n                       <option>-5</option>\n                   </select>\n                   </div>\n                   <div className=\"offset-lg-4 col-lg-4\">\n                       <input type=\"text\" onChange={this.updateSeq2} name=\"sequence1\" className=\"seq2\"/>\n                   </div>\n                   <button className=\"btn compare-btn\" onClick={this.buttonClick}>Compare</button>\n               </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport Search from './searchbox/search';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data:{}\n        };\n    }\n\n    handleResponse(val) {\n        this.setState({data: val.aligned});\n    }\n\n    render() {\n        let aligned = this.state.data;\n        let containerAlignment, containerGrid, alignmentb, rows, alignmenta;\n        const styles = {\n            \"clear\": \"both\"\n        };\n        if(aligned.hasOwnProperty('alignment_a')){\n              alignmentb = aligned.seq1.split('');\n              alignmentb.unshift(' ');\n              alignmentb.unshift(' ');\n\n              alignmenta = aligned.seq2.split('');\n              rows = aligned.matrix.map((row, i) => {\n                  if(i === 0){\n                      row.unshift(' ');\n                  } else {\n                      row.unshift(alignmenta[i-1]);\n                  }\n\n                  return row;\n              });\n\n              let generateGrid = function() {\n                  let rowLen = rows.length - 1;\n                  return rows.map((obj, i) => {\n                      if(i === 0){\n                          let colorCell = 1;\n                          return <tr>\n                              {obj.map((item, i) => {\n                                  if(i === colorCell){\n                                      return <td className=\"highlight\">{item}</td>\n                                  }\n                                  return <td>{item}</td>\n                              })}\n                          </tr>\n                      } else if(i === rowLen){\n                          let colorCell = obj.length - 1;\n                          return <tr>\n                              {obj.map((item, i) => {\n                                  if(i === colorCell){\n                                      return <td className=\"highlight\">{item}</td>\n                                  }\n                                  return <td>{item}</td>\n                              })}\n                          </tr>\n                      } else {\n                          let colorCell = aligned.path[i].sort();\n                          return <tr>\n                              {obj.map((item, i) => {\n                                  if(i === colorCell[0] + 1){\n                                      colorCell.shift();\n                                      return <td className=\"highlight\">{item}</td>\n                                  }\n                                  return <td>{item}</td>\n                              })\n                              }\n                          </tr>\n\n                      }\n\n                  })\n\n              };\n\n                containerGrid =\n                <table cellPadding=\"10\" className=\"pure-table\">\n                    <tbody>\n                    <tr>\n                        {alignmentb.map((object, i) => { return <th>{object}</th>})}\n                    </tr>\n                    {\n                        generateGrid()\n                    }\n                    </tbody>\n                </table>;\n\n                containerAlignment =\n                        <div className=\"output\">\n                                <div className=\"alignment-section\">\n                                    <h3 className=\"section-header\">Optimal Alignment</h3>\n                                    <div className=\"section\">\n                                        <h4 className=\"aligned\">{aligned.alignment_a}</h4>\n                                        <h4 className=\"aligned\">{aligned.alignment_b}</h4>\n                                    </div>\n                                </div>\n                            <div className=\"grid-section\">\n                                <h3 className=\"section-header\">Scoring Grid</h3>\n                                <div className=\"section\">\n                                    {containerGrid}\n                                </div>\n                            </div>\n                            <div style={styles}></div>\n                            </div>\n                        }\n\n        return (\n                <React.Fragment>\n                    <header className=\"app-header\">\n                        <h4 className=\"header-text\">Directed Study</h4>\n                    </header>\n                        <div className=\"introduction\">\n                            <h2 className=\"title\">Needleman–Wunsch Pairwise Sequence Alignment</h2>\n                            <p>Compare two sequences by entering them below and hitting compare!</p>\n                        </div>\n                        <Search data={this.handleResponse.bind(this)}/>\n                        {containerAlignment}\n                    <footer className=\"app-footer\">\n                      <div className=\"left\">Michael Gargano</div>\n                      <div className=\"right\">Jared Auclair</div>\n                    </footer>\n                </React.Fragment>\n            );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}